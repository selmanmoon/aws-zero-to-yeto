#!/usr/bin/env python3
"""
AWS ZERO to YETO - CloudWatch Python √ñrneƒüi
"""

import boto3
import time
import json
from datetime import datetime, timedelta

class CloudWatchManager:
    def __init__(self, region='eu-west-1'):
        self.cloudwatch = boto3.client('cloudwatch', region_name=region)
        self.logs = boto3.client('logs', region_name=region)
    
    def send_custom_metric(self, namespace, metric_name, value, unit='Count'):
        """Custom metric g√∂nder"""
        try:
            print(f"üìä Custom metric g√∂nderiliyor: {metric_name} = {value}")
            
            self.cloudwatch.put_metric_data(
                Namespace=namespace,
                MetricData=[
                    {
                        'MetricName': metric_name,
                        'Value': value,
                        'Unit': unit,
                        'Timestamp': datetime.utcnow()
                    }
                ]
            )
            print(f"‚úÖ Metric g√∂nderildi: {namespace}/{metric_name}")
            return True
        except Exception as e:
            print(f"‚ùå Metric g√∂nderme hatasƒ±: {str(e)}")
            return False
    
    def create_alarm(self, alarm_name, metric_name, namespace, threshold, comparison='GreaterThanThreshold'):
        """CloudWatch alarm olu≈ütur"""
        try:
            print(f"üö® Alarm olu≈üturuluyor: {alarm_name}")
            
            self.cloudwatch.put_metric_alarm(
                AlarmName=alarm_name,
                ComparisonOperator=comparison,
                EvaluationPeriods=2,
                MetricName=metric_name,
                Namespace=namespace,
                Period=300,
                Statistic='Average',
                Threshold=threshold,
                ActionsEnabled=False,  # Demo i√ßin action yok
                AlarmDescription=f'AWS ZERO to YETO - {metric_name} alarm'
            )
            print(f"‚úÖ Alarm olu≈üturuldu: {alarm_name}")
            return True
        except Exception as e:
            print(f"‚ùå Alarm olu≈üturma hatasƒ±: {str(e)}")
            return False
    
    def send_log(self, log_group, log_stream, message):
        """CloudWatch Logs'a mesaj g√∂nder"""
        try:
            # Log group var mƒ± kontrol et
            try:
                self.logs.describe_log_groups(logGroupNamePrefix=log_group)
            except:
                self.logs.create_log_group(logGroupName=log_group)
                print(f"üìù Log group olu≈üturuldu: {log_group}")
            
            # Log stream var mƒ± kontrol et
            try:
                self.logs.describe_log_streams(
                    logGroupName=log_group,
                    logStreamNamePrefix=log_stream
                )
            except:
                self.logs.create_log_stream(
                    logGroupName=log_group,
                    logStreamName=log_stream
                )
                print(f"üìù Log stream olu≈üturuldu: {log_stream}")
            
            # Log g√∂nder
            self.logs.put_log_events(
                logGroupName=log_group,
                logStreamName=log_stream,
                logEvents=[
                    {
                        'timestamp': int(time.time() * 1000),
                        'message': json.dumps({
                            'timestamp': datetime.now().isoformat(),
                            'message': message,
                            'source': 'AWS-ZERO-TO-YETO'
                        })
                    }
                ]
            )
            print(f"‚úÖ Log g√∂nderildi: {message}")
            return True
        except Exception as e:
            print(f"‚ùå Log g√∂nderme hatasƒ±: {str(e)}")
            return False
    
    def get_metrics(self, namespace, metric_name, hours=1):
        """Metric verilerini al"""
        try:
            print(f"üìà Metrik verileri alƒ±nƒ±yor: {namespace}/{metric_name}")
            
            end_time = datetime.utcnow()
            start_time = end_time - timedelta(hours=hours)
            
            response = self.cloudwatch.get_metric_statistics(
                Namespace=namespace,
                MetricName=metric_name,
                StartTime=start_time,
                EndTime=end_time,
                Period=300,  # 5 dakika
                Statistics=['Sum', 'Average', 'Maximum']
            )
            
            datapoints = response['Datapoints']
            if datapoints:
                print(f"üìä {len(datapoints)} veri noktasƒ± bulundu:")
                for point in sorted(datapoints, key=lambda x: x['Timestamp']):
                    timestamp = point['Timestamp'].strftime('%H:%M')
                    print(f"   {timestamp}: Sum={point.get('Sum', 0)}, Avg={point.get('Average', 0):.2f}")
            else:
                print("üìä Veri bulunamadƒ±")
            
            return datapoints
        except Exception as e:
            print(f"‚ùå Metrik alma hatasƒ±: {str(e)}")
            return []

def main():
    """Ana fonksiyon"""
    print("üìä AWS ZERO to YETO - CloudWatch Python √ñrnekleri")
    print("=" * 50)
    
    cw = CloudWatchManager()
    
    try:
        # 1. Custom metric g√∂nder
        print("\nüìä Custom Metrics")
        cw.send_custom_metric('AWS/ZeroToYeto', 'UserActions', 5)
        cw.send_custom_metric('AWS/ZeroToYeto', 'PageViews', 10)
        
        # 2. Log g√∂nder
        print("\nüìù CloudWatch Logs")
        cw.send_log('/aws/zero-to-yeto/demo', 'app-stream', 'Uygulama ba≈ülatƒ±ldƒ±')
        cw.send_log('/aws/zero-to-yeto/demo', 'app-stream', 'Kullanƒ±cƒ± login oldu')
        
        # 3. Alarm olu≈ütur
        print("\nüö® CloudWatch Alarms")
        cw.create_alarm('HighUserActions', 'UserActions', 'AWS/ZeroToYeto', 3.0)
        
        # 4. Metrics kontrol√º (1 dakika bekle)
        print("\n‚è≥ Metriklerin i≈ülenmesi i√ßin 60 saniye bekleniyor...")
        time.sleep(60)
        
        print("\nüìà Metric Verileri")
        cw.get_metrics('AWS/ZeroToYeto', 'UserActions')
        
        print("\nüéâ CloudWatch demo tamamlandƒ±!")
        print("\nüìã AWS Console'da kontrol edin:")
        print("- CloudWatch > Metrics > AWS/ZeroToYeto")
        print("- CloudWatch > Logs > /aws/zero-to-yeto/demo")
        print("- CloudWatch > Alarms > HighUserActions")
        
    except Exception as e:
        print(f"‚ùå Beklenmeyen hata: {str(e)}")

if __name__ == "__main__":
    main()
